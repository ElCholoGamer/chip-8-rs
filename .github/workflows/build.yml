name: CI
on: [ push ]

env:
  RELEASE_BIN: chip8
  RELEASE_DIR: artifacts
  GITHUB_REF: '${{ github.ref }}'
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_AMD64_TARGET: x86_64-unknown-linux-musl
  LINUX_ARM64_TARGET: aarch64-unknown-linux-musl

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            rust: stable
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            rust: stable
          - target: x86_64-apple-darwin
            os: macos-latest
            rust: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install p7zip (MacOS)
        if: matrix.os == 'macos-latest'
        run: brew install p7zip
      - name: Add rustup target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Set RUSTFLAGS (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "RUSTFLAGS=-Ctarget-feature=+crt-static" >> $GITHUB_ENV

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir -p ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
      - name: Move binaries (Linux/MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mv ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
      - name: Move binaries (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }}.exe ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}/${{ env.RELEASE_BIN }}.exe
          cp ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }}.exe wasm-pack-init.exe
          mv ${{ env.RELEASE_ADDS }} ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
          mv wasm-pack-init.exe ${{ env.RELEASE_DIR }}
      - name: Create tarball
        run: 7z a -ttar -so -an ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }} | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz
      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}
          path: ./${{ env.RELEASE_DIR }}
